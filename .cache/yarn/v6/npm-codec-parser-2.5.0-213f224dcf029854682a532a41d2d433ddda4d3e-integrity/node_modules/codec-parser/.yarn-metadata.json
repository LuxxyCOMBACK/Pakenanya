{
  "manifest": {
    "name": "codec-parser",
    "version": "2.5.0",
    "description": "Library that parses raw data from audio codecs into frames containing data, header values, duration, and other information.",
    "main": "index.js",
    "types": "index.d.ts",
    "keywords": [
      "mp3",
      "mpeg",
      "aac",
      "aacp",
      "flac",
      "opus",
      "vorbis",
      "ogg",
      "ogg-flac",
      "ogg-opus",
      "ogg-vorbis"
    ],
    "scripts": {
      "test": "node --experimental-vm-modules node_modules/.bin/jest --maxWorkers=100% --coverage --no-color 2> test-results.txt && cat test-results.txt",
      "format": "prettier --cache --write \"**/*.js\" --write \"package.json\" --write \"**/*.d.ts\""
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/eshaz/codec-parser.git"
    },
    "author": {
      "name": "Ethan Halsall",
      "email": "ethanhalsall@pm.me"
    },
    "license": "LGPL-3.0-or-later",
    "bugs": {
      "url": "https://github.com/eshaz/codec-parser/issues"
    },
    "type": "module",
    "sideEffects": false,
    "homepage": "https://github.com/eshaz/codec-parser#readme",
    "devDependencies": {
      "@types/jest": "^29.5.13",
      "jest": "^29.7.0",
      "prettier": "^3.3.3"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-codec-parser-2.5.0-213f224dcf029854682a532a41d2d433ddda4d3e-integrity/node_modules/codec-parser/package.json",
    "readmeFilename": "README.md",
    "readme": "# Codec Parser\n\n`codec-parser` is a JavaScript library that parses raw data from audio codecs into frames containing data, header values, duration, and other information.\n\n### Supports:\n  * **MPEG Layer I/II/III (MP3)** - `audio/mpeg`\n  * **AAC** - `audio/aac`, `audio/aacp`\n  * **FLAC** - `audio/flac`\n  * **Ogg FLAC** - `application/ogg`, `audio/ogg`\n  * **Ogg Opus** - `application/ogg`, `audio/ogg`\n  * **Ogg Vorbis** - `application/ogg`, `audio/ogg`\n\n## Demo\nThe demo for [`icecast-metadata-js`](https://github.com/eshaz/icecast-metadata-js) uses this library to allow for playback of streaming audio. `codec-parser` is used by [`mse-audio-wrapper`](https://github.com/eshaz/mse-audio-wrapper) to wrap streaming audio in ISOBMFF or WEBM so it can be played back using the MediaSource API.\n\n## View the live demo [here](https://eshaz.github.io/icecast-metadata-js/)!\n\n---\n\n* [Installing](#installing)\n* [Usage](#usage)\n  * [Instantiation](#instantiation)\n  * [Methods](#methods)\n  * [Properties](#properties)\n* [Data Types](#data-types)\n  * [OggPage](#oggpage)\n  * [CodecFrame](#codecframe)\n  * [CodecHeader](#codecheader)\n    * [MPEGHeader](#mpegheader)\n    * [AACHeader](#aacheader)\n    * [FLACHeader](#flacheader)\n    * [OpusHeader](#opusheader)\n    * [VorbisHeader](#vorbisheader)\n\n## Installing\n\n### Install via [NPM](https://www.npmjs.com/package/codec-parser)\n* `npm i codec-parser`\n\n## Usage\n\n1. Create a new instance of `CodecParser` by passing in the mimetype of your audio data along with the options object.\n\n    *Note: For directly reading from a HTTP response, use the mimetype contained in the `Content-Type` header*\n    \n    ```javascript\n    import CodecParser from \"codec-parser\";\n\n    const mimeType = \"audio/mpeg\";\n    const options = {\n        onCodec: () => {},\n        onCodecUpdate: () => {},\n        enableLogging: true\n    };\n\n    const parser = new CodecParser(mimeType, options);\n    ```\n\n### Parsing an entire file\n\n1. To parse an entire audio file, pass in a Uint8Array of the entire audio file into the instance's `.parseAll()`. This method will read the all of the data and return an array of [`CodecFrame`](#codecframe)s or [`OggPage`](#oggpage)s.\n\n    ```javascript\n    const frames = parser.parseAll(audioData);\n\n    // Do something with the frames\n    ```\n\n### Parsing chunks of audio\n\n1. To begin processing chunks of audio data, pass in a Uint8Array of audio data into the instance's `.parseChunk()`. This method returns an iterator that can be consumed using a `for ...of` or `for await...of` loop.\n\n    ```javascript\n    for (const frame of parser.parseChunk(audioData)) {\n      // Do something with each frame\n    }\n    ```\n    ***or***\n    ```javascript\n    const frames = [...parser.parseChunk(audioData)]\n    ```\n\n    `CodecParser` will read the passed in data and attempt to parse audio frames according to the passed in `mimeType`. Any partial data will be stored until enough data is passed in for a complete frame can be formed. Iterations will begin to return frames once at least two consecutive frames have been detected in the passed in data.\n\n    *Note: Any data that does not conform to the instance's mimetype will be discarded.*\n\n    ### Example:\n\n    * 1st `.parseChunk()` call\n      * Input\n          ```\n          [MPEG frame 0 (partial)],\n          [MPEG frame 1 (partial)], \n          ```\n      * Output (no iterations)\n        ```\n        (none)\n        ```\n      * `Frame 0` is dropped since it doesn't start with a valid header.\n      * `Frame 1` is parsed and stored internally until enough data is passed in to properly sync.\n    * 2nd `.parseChunk()` call\n      * Input\n          ```\n          [MPEG frame 1 (partial)], \n          [MPEG frame 2 (partial)]\n          ```\n      * Output (1 iteration)\n        ```\n        MPEG Frame 1 {\n            data,\n            header\n            ...\n        }\n        ```\n      * `Frame 1` is joined with the partial data and returned since it was immediately followed by `Frame 2`.\n      * `Frame 2` is stored internally as partial data.\n    * 3rd `.parseChunk()` call\n      * Input\n        ```\n        [MPEG frame 2 (partial)],\n        [MPEG frame 3 (full)], \n        [MPEG frame 4 (partial)]\n        ```\n      * Output (2 iterations)\n        ```\n        MPEG Frame 2 {\n            data,\n            header\n            ...\n        }\n        ```\n        ```\n        MPEG Frame 3 {\n            data,\n            header\n            ...\n        }\n        ```\n      * `Frame 2` is joined with the partial data and returned since it was immediately followed by `Frame 3`.\n      * `Frame 3` is returned since it was immediately followed by `Frame 4`.\n      * `Frame 4` is stored internally as partial data.\n\n1. When you have come to the end of the stream or file, you may call the instance's `flush()` method to return another iterator that will yield any remaining frames that are buffered. Calling `flush()` will reset the internal state of the `CodecParser` instance and may re-use the instance to parse additional streams.\n\n    ```javascript\n    for (const frame of parser.flush()) {\n      // Do something the buffered frames\n    }\n    ```\n    ***or***\n    ```javascript\n    const frames = [...parser.flush()]\n    ```\n\n\n### Instantiation\n\n`const parser = new CodecParser(\"audio/mpeg\", options);`\n* `constructor` Creates a new instance of CodecParser that can be used to parse audio for a given mimetype.\n  * `mimetype` *required* Incoming audio codec or container\n    * MP3 - `audio/mpeg`\n    * AAC - `audio/aac`, `audio/aacp`\n    * FLAC - `audio/flac`\n    * Ogg FLAC - `application/ogg`, `audio/ogg`\n    * Ogg Opus - `application/ogg`, `audio/ogg`\n    * Ogg Vorbis - `application/ogg`, `audio/ogg`\n  * `options` *optional*\n    * `options.onCodec()` *optional* Called when the output codec is determined.\n      * See `parser.codec` for a list of the possible output codecs\n    * `options.onCodecHeader(codecHeaderData)` *optional* Called once when the codec header is first parsed.\n      * `codecHeaderData` Object containing codec header information.\n    * `options.onCodecUpdate(codecHeaderData, updateTimestamp)` *optional* Called when there is a change in the codec header.\n      * `codecHeaderData` Object containing codec header information that was updated.\n      * `updateTimestamp` Timestamp in milliseconds when the codec information was updated.\n    * `options.enableLogging` *optional* Set to true to enable warning and error messages.\n    * `options.enableFrameCRC32` *optional* Set to false to disable the crc32 calculation for each frame. This will save a marginal amount of execution time if you don't need this information.\n\n### Methods\n\n* `parser.parseAll(data)` Function that takes a audio data for an entire file.\n  * `data` `Uint8Array` of audio data for a complete audio stream / file\n  * Returns an Array of [`CodecFrame`](#codecframe)s or [`OggPage`](#oggpage)s for the entire file\n* `parser.parseChunk(chunk)` Generator function that yields frames for a partial chunk of audio data from an audio stream or file\n  * `chunk` `Uint8Array` of audio data\n  * Returns `Iterator` that yields a parsed [`CodecFrame`](#codecframe) or [`OggPage`](#oggpage) for each iteration.\n* `parser.flush()` Generator function that yields any buffered frames that are stored after `parseChunk()` completes\n  * Returns `Iterator` that yields a parsed [`CodecFrame`](#codecframe) or [`OggPage`](#oggpage) for each iteration.\n  * This function can be used after `parseChunk` has been called with all of the audio data you intend to parse. The final iterator returned by `parseChunk()` must be consumed before calling `flush()`.\n  * Calling `flush()` will reset the internal state of the `CodecParser` instance. You may re-use the instance to parse additional streams.\n\n### Properties\n\n* `parser.codec` The detected codec of the audio data\n    * **Note: For Ogg streams, the codec will only be available after Ogg identification header has been parsed.**\n  * Values:\n    * MPEG (MP3) - `\"mpeg\"`\n    * AAC - `\"aac\"`\n    * FLAC - `\"flac\"`\n    * Opus - `\"opus\"`\n    * Vorbis - `\"vorbis\"`\n\n## Data Types\n\nDepending on the mimetype each iteration of `CodecParser.parseChunk()` will return a single `CodecFrame` or a single `OggPage`.\n\n### `OggPage`\n\n`OggPage` describes a single ogg page. An `OggPage` may contain zero to many `CodecFrame` objects. `OggPage` will be returned when the mimetype is `audio/ogg` or `application/ogg`.\n\n* `absoluteGranulePosition`: Total audio samples in the ogg stream up to the end of this `OggPage`.\n* `codecFrames`: Array of `CodecFrame`(s) contained within this `OggPage`.\n* `crc32`: CRC-32 hash of the frame data using the Ogg formula / polynomial.\n* `data`: `Uint8Array` containing the page segments within the ogg page.\n* `duration`: Audio duration in milliseconds contained within this `OggPage`.\n* `isContinuedPacket`: Boolean indicating if this `OggPage` is part of a continued packet.\n* `isFirstPage`: Boolean indicating if this `OggPage` is the first page in the Ogg stream.\n* `isLastPage`: Boolean indicating if this this `OggPage` is the final page in the Ogg stream.\n* `pageSequenceNumber`: Page sequence number within the Ogg stream.\n* `rawData`: `Uint8Array` Total data of the `OggPage`.\n* `samples`: Total number of audio samples contained within the `OggPage`.\n* `streamSerialNumber`: Serial number of the Ogg stream.\n* `totalBytesOut`: Total bytes of codec data output by `CodecParer` at the end of this ogg page.\n* `totalDuration`: Total audio samples output by `CodecParer` at the end of this ogg page.\n* `totalSamples`: Total audio duration in milliseconds output by `CodecParer` at the end of this ogg page.\n\n### `CodecFrame`\n\n`CodecFrame` describes a single frame for an audio codec. `CodecFrame` will be returned when the mimetype describes audio that is not encapsulated within a container i.e. `audio/mpeg`, `audio/aac`, or `audio/flac`.\n\n* `data`: `Uint8Array` containing the audio data within this frame.\n* `header`: [`Header`](#header) object describing the codec information.\n* `crc32`: CRC-32 hash of the frame data.\n* `samples`: Audio samples contained within this frame.\n* `duration`: Audio duration in milliseconds contained within this frame.\n* `frameNumber`: Total count of frames output by `CodecParser` starting at 0.\n* `totalBytesOut`: Total bytes output by `CodecParer` not including this frame.\n* `totalSamples`: Total audio samples output by `CodecParer` not including this frame.\n* `totalDuration`: Total audio duration in milliseconds output by `CodecParer` not including this frame.\n\n#### Example\n```javascript\n// First CodecFrame\nMPEGFrame {\n  data: Uint8Array(417),\n  header: MPEGHeader {\n    bitDepth: 16,\n    channels: 2,\n    sampleRate: 44100,\n    bitrate: 128,\n    channelMode: \"joint stereo\",\n    emphasis: \"none\",\n    framePadding: 1,\n    isCopyrighted: false,\n    isOriginal: true,\n    isPrivate: false,\n    layer: \"Layer III\",\n    modeExtension: \"Intensity stereo off, MS stereo on\",\n    mpegVersion: \"MPEG Version 1 (ISO/IEC 11172-3)\",\n    protection: \"none\"\n  },\n  crc32: 275944052,\n  samples: 1152,\n  duration: 26.122448979591837,\n  frameNumber: 0,\n  totalBytesOut: 0,\n  totalSamples: 0,\n  totalDuration: 0\n}\n\n// Second CodecFrame\nMPEGFrame {\n  data: Uint8Array(416),\n  header: MPEGHeader {\n    bitDepth: 16,\n    channels: 2,\n    sampleRate: 44100,\n    bitrate: 128,\n    channelMode: \"joint stereo\",\n    emphasis: \"none\",\n    framePadding: 0,\n    isCopyrighted: false,\n    isOriginal: true,\n    isPrivate: false,\n    layer: \"Layer III\",\n    modeExtension: \"Intensity stereo off, MS stereo on\",\n    mpegVersion: \"MPEG Version 1 (ISO/IEC 11172-3)\",\n    protection: \"none\"\n  },\n  crc32: 1336875295,\n  samples: 1152,\n  duration: 26.122448979591837,\n  frameNumber: 1,\n  totalBytesOut: 418,\n  totalSamples: 1152,\n  totalDuration: 26.122448979591837\n}\n```\n\n### CodecHeader\n\nEach codec has it's own `CodecHeader` data type. See each class below for documentation on each codec specific header.\n\n### `MPEGHeader`\n[***Documentation***](https://github.com/eshaz/codec-parser/blob/master/src/codecs/mpeg/MPEGHeader.js)\n```javascript\n{\n  bitDepth: 16,\n  bitrate: 192,\n  channels: 2,\n  sampleRate: 44100,\n  channelMode: \"joint stereo\",\n  emphasis: \"none\",\n  framePadding: 1,\n  isCopyrighted: false,\n  isOriginal: false,\n  isPrivate: false,\n  layer: \"Layer III\",\n  modeExtension: \"Intensity stereo off, MS stereo on\",\n  mpegVersion: \"MPEG Version 1 (ISO/IEC 11172-3)\",\n  protection: \"16bit CRC\"\n}\n```\n### `AACHeader`\n[***Documentation***](https://github.com/eshaz/codec-parser/blob/master/src/codecs/aac/AACHeader.js)\n```javascript\n{\n  bitDepth: 16,\n  bitrate: 312,\n  channels: 2,\n  sampleRate: 44100,\n  copyrightId: false,\n  copyrightIdStart: false,\n  channelMode: \"stereo (left, right)\",\n  bufferFullness: \"VBR\",\n  isHome: false,\n  isOriginal: false,\n  isPrivate: false,\n  layer: \"valid\",\n  length: 7,\n  mpegVersion: \"MPEG-4\",\n  numberAACFrames: 0,\n  profile: \"AAC LC (Low Complexity)\",\n  protection: \"none\"\n}\n```\n\n### `FLACHeader`\n[***Documentation***](https://github.com/eshaz/codec-parser/blob/master/src/codecs/flac/FLACHeader.js)\n```javascript\n{\n  bitDepth: 16,\n  bitrate: 400,\n  channels: 2,\n  sampleRate: 44100,\n  channelMode: \"stereo (left, right)\",\n  blockingStrategy: \"Fixed\",\n  blockSize: 4096,\n  frameNumber: 15183508,\n  crc16: 56624,\n  streamInfo: Uint8Array\n}\n```\n\n### `OpusHeader`\n[***Documentation***](https://github.com/eshaz/codec-parser/blob/master/src/codecs/opus/OpusHeader.js)\n```javascript\n{\n  bitDepth: 16,\n  bitrate: 192,\n  channels: 2,\n  data: Uint8Array,\n  sampleRate: 48000,\n  bandwidth: \"fullband\",\n  channelMappingFamily: 1,\n  channelMappingTable: [0, 1],\n  coupledStreamCount: 1,\n  streamCount: 1,\n  channelMode: \"stereo (left, right)\",\n  frameCount: 1,\n  frameSize: 20,\n  inputSampleRate: 48000,\n  mode: \"CELT-only\",\n  outputGain: 0,\n  preSkip: 312\n}\n```\n### `VorbisHeader`\n[***Documentation***](https://github.com/eshaz/codec-parser/blob/master/src/codecs/vorbis/VorbisHeader.js)\n```javascript\n{\n  bitDepth: 32,\n  bitrate: 272,\n  channels: 2,\n  channelMode: \"stereo (left, right)\",\n  sampleRate: 44100,\n  bitrateMaximum: 0,\n  bitrateMinimum: 0,\n  bitrateNominal: 320000,\n  blocksize0: 256,\n  blocksize1: 2048\n  data: Uint8Array,\n  vorbisComments: Uint8Array,\n  vorbisSetup: Uint8Array\n}\n```",
    "licenseText": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/codec-parser/-/codec-parser-2.5.0.tgz#213f224dcf029854682a532a41d2d433ddda4d3e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/codec-parser/-/codec-parser-2.5.0.tgz",
    "hash": "213f224dcf029854682a532a41d2d433ddda4d3e",
    "integrity": "sha512-Ru9t80fV8B0ZiixQl8xhMTLru+dzuis/KQld32/x5T/+3LwZb0/YvQdSKytX9JqCnRdiupvAvyYJINKrXieziQ==",
    "registry": "npm",
    "packageName": "codec-parser",
    "cacheIntegrity": "sha512-Ru9t80fV8B0ZiixQl8xhMTLru+dzuis/KQld32/x5T/+3LwZb0/YvQdSKytX9JqCnRdiupvAvyYJINKrXieziQ== sha1-IT8iTc8CmFRoKlMqQdLUM93aTT4="
  },
  "registry": "npm",
  "hash": "213f224dcf029854682a532a41d2d433ddda4d3e"
}