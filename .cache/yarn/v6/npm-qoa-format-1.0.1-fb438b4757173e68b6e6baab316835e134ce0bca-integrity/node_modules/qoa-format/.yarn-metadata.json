{
  "manifest": {
    "name": "qoa-format",
    "version": "1.0.1",
    "description": "A JavaScript port of [The \"Quite OK Audio\" (QOA) format](https://github.com/phoboslab/qoa), a lossy audio compression that achieves relatively decent compression with fast decoding and not much complexity. Also see [this](https://phoboslab.org/log/2023/02/qoa-time-domain-audio-compression) blog post by @phoboslab.",
    "main": "index.js",
    "type": "module",
    "license": "MIT",
    "author": {
      "name": "Matt DesLauriers",
      "email": "dave.des@gmail.com",
      "url": "https://github.com/mattdesl"
    },
    "dependencies": {
      "@thi.ng/bitstream": "^2.2.12"
    },
    "scripts": {
      "test": "node test/test.js",
      "test:browser": "esbuild test/webaudio.js --outdir=test --bundle --servedir=test"
    },
    "keywords": [],
    "repository": {
      "type": "git",
      "url": "git://github.com/mattdesl/qoa-format.git"
    },
    "homepage": "https://github.com/mattdesl/qoa-format",
    "bugs": {
      "url": "https://github.com/mattdesl/qoa-format/issues"
    },
    "devDependencies": {
      "audiobuffer-to-wav": "^1.0.0",
      "esbuild": "^0.17.6",
      "minimist": "^1.2.7",
      "tape": "^5.6.3",
      "wav-decoder": "^1.3.0"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-qoa-format-1.0.1-fb438b4757173e68b6e6baab316835e134ce0bca-integrity/node_modules/qoa-format/package.json",
    "readmeFilename": "README.md",
    "readme": "# qoa-format\n\nA JavaScript port of [The \"Quite OK Audio\" (QOA) format](https://github.com/phoboslab/qoa), a lossy audio compression that achieves relatively decent compression with fast decoding and not much complexity. Also see [this](https://phoboslab.org/log/2023/02/qoa-time-domain-audio-compression) blog post by @phoboslab.\n\nFeatures:\n\n- Lossy, time domain audio compression format with a constrained bitrate of 277 kbits/s for stereo 44100 Hz\n- This pure JavaScript encoder / decoder implementation bundles to about 6kb minified (or 3kb for just the decoder)\n- Works in Node.js and the browser without any specific audio APIs\n- Rough decoding performance tests on MBP M1 Max in Chrome show similar performance to WebAudio `decodeAudioData`\n- The audio format and encoder/decoder is open source and MIT licensed\n\n_This software is still experimental, unstable, and likely to change or break. Use at your own risk._\n\n## ‚ö†Ô∏è Warning\n\nIf you are hacking and experimenting with this, take care when using headphones as garbage data may produced loud noises that can damage hearing.\n\nAs the spec is still in flux, this may not correctly decode files generated by different versions of [the C encoder](https://github.com/phoboslab/qoa/) or third-party implementations. This has been tested against [this particular QOA commit tree](https://github.com/phoboslab/qoa/tree/e8386f41d435a864ce2890e9f56d964215b40301) when building from source on macOS.\n\n## Example\n\n```js\nimport { encode, decode } from 'qoa-format';\n\n// or just the decode/encode function -\n// import decode from 'qoa-format/decode.js';\n\n// Encoding raw audio samples\nconst audioData = {\n  sampleRate: 44100\n  channelData: [\n    new Float32Array([ /* audio samples */ ])\n  ]\n}\n\n// lossy encode raw audio samples to Uint8Array QOA file\nconst qoaFile = encode(audioData)\n\n// Decode QOA file back to audio data\nconst decodedAudio = decode(qoaFile);\n\n// Show info about the decoded file\nconsole.log(decodedAudio.sampleRate); // 44100\nconsole.log(decodedAudio.channels); // 1\nconsole.log(decodedAudio.samples); // (number of samples in audio signal)\nconsole.log(decodedAudio.channelData); // [ Float32Array(samples) ]\n```\n\nSee [test/sine.js](./test/sine.js) for encoding/decoding a 441 Hz sine wave, and [test/webaudio.js](./test/webaudio.js) for a decoder and web audio QOA player.\n\n## Install\n\nUse [npm](https://npmjs.com/) to install.\n\n```sh\nnpm install qoa-format --save\n```\n\n## API Usage\n\n#### `data = encode({ channelData, sampleRate })`\n\nEncodes the audio signal in `channelData` with `sampleRate` as a QOA file, returning `data` as a `Uint8Array`. The length of `channelData` determines the number of channels (mono, stereo, multi-channel), and each element is expected to be a `Float32Array` with the same length (i.e. `samples` or number of sample frames). The signal is expected to range from `-1..1`.\n\n#### `audio = decode(Uint8Array | Buffer)`\n\nDecodes the `Uint8Array` or `Buffer` object into an `audio` specifier which has the following format:\n\n```\n{\n  sampleRate, // in Hz\n  channels, // number of channels\n  samples, // number of frame samples per channel\n  channelData: [\n    // an array of audio samples for each channel\n    Float32Array(samples),\n    ...\n  ]\n}\n```\n\n## Run from Source\n\nOnce cloned, you can `npm install` and then run the test:\n\n```sh\nnpm run test\n```\n\nOr the HTML/WebAudio test, run the below command and then open [http://localhost:8000/test/webaudio.html](http://localhost:8000/test/webaudio.html). **Note:** Take caution when wearing headphones if you are hacking with this. üéß\n\n```sh\nnpm run test:browser\n```\n\nOr run the CLI to convert files:\n\n```sh\n# encode WAV to QOA\nnode test/cli.js input.wav output.qoa\n\n# decode QOA to WAV\nnode test/cli.js output.qoa converted.wav\n```\n\n## TODOs\n\n- A more optimized BitStream reader/writer could be added to this module to remove a dependency, produce a smaller build size, and potentially improve performance.\n- The QOA format is easily seekable, this should be exposed in the API to allow fast seeking and audio streaming on the web\n\n## Credits\n\n- QOA format by @phoboslab\n- JavaScript port by @mattdesl\n- Thanks to @thi.ng for the BitStream decoder\n\n## License\n\nMIT, see [LICENSE.md](http://github.com/mattdesl/qoa-format/blob/master/LICENSE.md) for details.\n",
    "licenseText": "The MIT License (MIT)\nCopyright (c) 2020 Matt DesLauriers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\nOR OTHER DEALINGS IN THE SOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/qoa-format/-/qoa-format-1.0.1.tgz#fb438b4757173e68b6e6baab316835e134ce0bca",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/qoa-format/-/qoa-format-1.0.1.tgz",
    "hash": "fb438b4757173e68b6e6baab316835e134ce0bca",
    "integrity": "sha512-dMB0Z6XQjdpz/Cw4Rf6RiBpQvUSPCfYlQMWvmuWlWkAT7nDQD29cVZ1SwDUB6DYJSitHENwbt90lqfI+7bvMcw==",
    "registry": "npm",
    "packageName": "qoa-format",
    "cacheIntegrity": "sha512-dMB0Z6XQjdpz/Cw4Rf6RiBpQvUSPCfYlQMWvmuWlWkAT7nDQD29cVZ1SwDUB6DYJSitHENwbt90lqfI+7bvMcw== sha1-+0OLR1cXPmi25rqrMWg14TTOC8o="
  },
  "registry": "npm",
  "hash": "fb438b4757173e68b6e6baab316835e134ce0bca"
}